{"version":3,"sources":["store/index.ts","api/getData.ts","components/Start.tsx","components/Sort.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["setTodos","todos","type","payload","isLoading","state","loading","getTodos","getSortField","sortField","getSortedTodos","a","b","completed","title","localeCompare","userName","initialState","store","createStore","action","composeWithDevTools","getData","API","fetch","then","response","json","fetchedData","data","catch","error","Start","dispatch","useDispatch","useSelector","handleClick","users","todosWithUser","map","todo","todoCopy","neededUser","find","user","id","userId","name","onClick","disabled","connector","connect","TodoItem","className","checked","TodoList","item","key","App","length","sort","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c420f05.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Todo } from '../components/Interfaces';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst SET_TODOS = 'SET_TODOS';\nconst SET_SORT_FIELD = 'SET_SORT_FIELD';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const setTodos = (todos: Todo[]) => ({ type: SET_TODOS, payload: todos });\nexport const setSortField = (value: string) => ({ type: SET_SORT_FIELD, sortField: value });\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getSortField = (state: RootState) => state.sortField;\n\nexport const getSortedTodos = (sortField: string) => {\n  switch (sortField) {\n    case 'completed':\n      return (a: Todo, b: Todo) => {\n        if (a.completed === b.completed) {\n          return 0;\n        }\n\n        if (a.completed) {\n          return -1;\n        }\n\n        return 1;\n      };\n\n    case 'title':\n      return (a: Todo, b: Todo) => a.title.localeCompare(b.title);\n\n    case 'userName':\n      return (a: Todo, b: Todo) => {\n        if (a.userName && b.userName) {\n          return a.userName.localeCompare(b.userName);\n        }\n\n        return 0;\n      };\n\n    default:\n      return () => 0;\n  }\n};\n\n// Initial state\nexport type RootState = {\n  loading: boolean;\n  todos: Todo[];\n  sortField: string;\n};\n\nconst initialState: RootState = {\n  loading: false,\n  todos: [],\n  sortField: '',\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, loading: true };\n\n    case SET_TODOS:\n      return {\n        ...state,\n        loading: false,\n        todos: action.payload,\n      };\n\n    case SET_SORT_FIELD:\n      return {\n        ...state,\n        sortField: action.sortField,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","export function getData <T>(API: string): Promise<T[]> {\n  return fetch(API)\n    .then(response => response.json())\n    .then(fetchedData => fetchedData.data)\n    .catch(error => error);\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  isLoading, startLoading, setTodos,\n} from '../store';\nimport { Todo, User } from './Interfaces';\nimport { getData } from '../api/getData';\n\nconst API_TODOS = 'https://mate.academy/students-api/todos';\nconst API_USERS = 'https://mate.academy/students-api/users';\n\ntype Props = {\n  title: string;\n};\n\nexport const Start: React.FC<Props> = ({ title }) => {\n  const dispatch = useDispatch(); // it is a link to `store.dispatch` method\n  const loading = useSelector(isLoading); // we pass a link to selector function here\n\n  const handleClick = async () => {\n    dispatch(startLoading());\n\n    const todos = await getData<Todo>(API_TODOS);\n    const users = await getData<User>(API_USERS);\n\n    const todosWithUser: Todo[] = todos.map((todo: Todo) => {\n      const todoCopy = { ...todo };\n      const neededUser: User | undefined = users.find(user => user.id === todo.userId);\n\n      todoCopy.userName = neededUser ? neededUser.name : '';\n\n      return todoCopy;\n    });\n\n    dispatch(setTodos(todosWithUser));\n  };\n\n  return (\n    <button\n      type=\"button\"\n      onClick={handleClick}\n      disabled={loading}\n    >\n      {title}\n    </button>\n  );\n};\n","import React, { Dispatch } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState, setSortField } from '../store';\n\nconst Sort: React.FC<Props> = ({ handleClick }) => {\n  return (\n    <div>\n      <h2>Sort By:</h2>\n      <button\n        type=\"button\"\n        onClick={() => handleClick('completed')}\n      >\n        Completed\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => handleClick('title')}\n      >\n        Title\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => handleClick('userName')}\n      >\n        User name\n      </button>\n    </div>\n  );\n};\n\ninterface SetSortFieldInterface {\n  type: string;\n  sortField: string;\n}\n\nconst mapState = (state: RootState) => ({\n  sortField: state.sortField,\n});\n\nconst mapDispatch = (dispatch: Dispatch<SetSortFieldInterface>) => ({\n  handleClick: (sortField: string) => dispatch(setSortField(sortField)),\n});\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector>;\n\nexport default connector(Sort);\n","import React from 'react';\nimport { Todo } from './Interfaces';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => (\n  <li className=\"list__item\">\n    <input type=\"checkbox\" checked={todo.completed} />\n    <span className=\"list__item-title\">{todo.title}</span>\n    <span className=\"list__item-user\">{todo.userName}</span>\n  </li>\n);\n","import React from 'react';\nimport { Todo } from './Interfaces';\nimport { TodoItem } from './TodoItem';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <ul className=\"list\">\n    {\n      todos.map((item: Todo) => (\n        <TodoItem key={item.id} todo={item} />\n      ))\n    }\n  </ul>\n);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  isLoading, getTodos, getSortedTodos, getSortField,\n} from './store';\n\nimport './App.scss';\nimport { Start } from './components/Start';\nimport Sort from './components/Sort';\nimport { TodoList } from './components/TodoList';\n\nexport const App: React.FC = () => {\n  const loading = useSelector(isLoading);\n  const sortField = useSelector(getSortField);\n  const todos = useSelector(getTodos);\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      <h2>{loading ? 'Loading...' : ''}</h2>\n      {\n        todos.length > 0\n          ? (\n            <Sort />\n          )\n          : (\n            <Start title=\"Start loading\" />\n          )\n      }\n      <TodoList todos={todos.sort(getSortedTodos(sortField))} />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}